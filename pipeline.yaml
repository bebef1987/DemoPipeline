pipeline {
     agent any
     environment {
        RunTests = "True"
        TestsRunSuccessfully = "True"
    }
     stages {
         stage('Initialize the variables') {
             steps{
                 echo 'Clean WorkSpace'
                 //cleanWs()
                 
                 echo 'Setup vars'
                 script{
                     PROCESS_OUTPUT_PATH = "${WORKSPACE}\\${BUILD_NUMBER}\\Process\\Output\\${BUILD_NUMBER}"
                     TEST_OUTPUT_PATH = "${WORKSPACE}\\${BUILD_NUMBER}\\test-reports"
                     ASSETS_FILE_PATH = "${WORKSPACE}\\assets.csv"
                 }
             }               
         }
         
         stage('Test code') {
            when {
                equals expected : 'True', actual: RunTests
            }
             steps {
                 echo 'UiPathTest'
                  /*
                  withEnv(["TEST_OUTPUT_PATH=$TEST_OUTPUT_PATH"]) {  
                     powershell '''
                     ./.pipeline/UiPathRunTests.ps1 -orchestrator_url https://cloud.uipath.com/ -orchestrator_tenant DefaultTenant -accountForApp myorggxpsdbv -applicationId 4c63e81b-d4c1-45d3-8c43-4cc8aa96ff8e -applicationSecret "GEEL)Fhnvast1F1M" -applicationScope "OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSetExecutions OR.TestSets OR.TestSetSchedules OR.Users.Read" -folder_organization_unit Sales -result_path $env:TEST_OUTPUT_PATH -project_path "$env:WORKSPACE\\project.json" -out junit
                 '''
                 }
                 */
                 echo "${TEST_OUTPUT_PATH}/*.xml"
                 
                 // Read test results
                 junit "${TEST_OUTPUT_PATH}/*.xml"
                 
                 
                 script {
                     if (currentBuild.result == 'UNSTABLE'){
                         currentBuild.result = 'FAILURE'
                         TestsRunSuccessfully = 'False'
                     }
                 }
             }
         }

        stage('Build code for Process') {
            when {
                equals expected : 'True', actual: TestsRunSuccessfully
            }
             steps {
                 echo 'UiPathPack'
                 echo PROCESS_OUTPUT_PATH
                 
                 UiPathPack (
                     outputPath: PROCESS_OUTPUT_PATH,
                     outputType: 'Process',
                     projectJsonPath: "${WORKSPACE}",
                     runWorkflowAnalysis: false,
                     traceLevel: 'Verbose',
                     version: AutoVersion()
                 )
                 
             }
         }

         stage('Deploy code') {
             when {
                equals expected : 'True', actual: TestsRunSuccessfully
            }
             steps {
                 echo 'UiPathDeploy'
                                 
                 
                 UiPathDeploy (
                    createProcess: false,
                    credentials: ExternalApp(
                            accountForApp: 'myorggxpsdbv', 
                            applicationId: '4c63e81b-d4c1-45d3-8c43-4cc8aa96ff8e', 
                            applicationScope: 'OR.Assets OR.BackgroundTasks OR.Execution OR.Folders OR.Jobs OR.Machines.Read OR.Monitoring OR.Robots.Read OR.Settings.Read OR.TestSetExecutions OR.TestSets OR.TestSetSchedules OR.Users.Read', 
                            applicationSecret: 'Uipathkey', 
                            identityUrl: 'https://cloud.uipath.com/'), 
                    folderName: 'Sales',
                    orchestratorAddress: 'https://cloud.uipath.com/',
                    orchestratorTenant: 'DefaultTenant',
                    entryPointPaths: 'SearchForCourse.xaml',
                    environments: '',
                  
                    packagePath: PROCESS_OUTPUT_PATH,
                    traceLevel: 'Verbose'
                )
             }
         }
      }
 }